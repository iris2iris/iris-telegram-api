package iris.tg.examples

import iris.tg.api.items.Message
import iris.tg.command.CommandMatcher
import iris.tg.longpoll.TgLongPoll
import iris.tg.command.TgCommandPackHandler
import iris.tg.processors.pack.TgEventMessagePackHandlerAdapterBasicTypes
import iris.tg.processors.pack.TgTextPackHandler
import iris.tg.tgApi
import iris.tg.tgApiFuture
import kotlin.system.exitProcess

/**
 * @created 27.10.2020
 * @author [Ivan Ivanov](https://vk.com/irisism)
 */
fun main() {

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –í —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
	TestUtil.init()
	val props = TestUtil.properties
	val token = props.getProperty("bot.token")

	// –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	val api = tgApiFuture(token)

	// api.deleteWebhook().get() // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ webhook'–∞

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
	val commandsHandler = TgCommandPackHandler<Message>()

	commandsHandler.text("–∫–∏–Ω–≥") {
		api.sendMessage(it.chat.id, "–ö–û–ù–ì!")
	}

	commandsHandler.text("–º–æ–π –∏–¥") {
		val from = it.from!!
		api.sendMessage(it.chat.id, "ID ${from.firstName} ${from.lastName} (@${from.username}) —Ä–∞–≤–µ–Ω: ${it.from!!.id}")
	}

	commandsHandler.regex("—Ä–∞–Ω–¥–æ–º (\\d+) (\\d+)") { message, params ->

		var first = params[1].toInt()
		var second = params[2].toInt()
		if (second < first)
			first = second.also { second = first }

		api.sendMessage(message.chat.id, "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [$first..$second] –≤—ã–ø–∞–ª–æ –Ω–∞ ${(first..second).random()}")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
	commandsHandler += object : CommandMatcher {
		override fun testAndExecute(command: String, message: Message): Boolean {
			if (!(command.startsWith("–ø–∏–Ω–≥") || command.endsWith("–ø—ã–Ω—å–∫"))) return false
			api.sendMessage(message.chat.id, "–ü–û–ù–ì!")
			return true
		}
	}

	// –ü–µ—Ä–µ–¥–∞—ë–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
	val listener = TgLongPoll(tgApi(token), TextHandlerAdapter(commandsHandler))
	listener.startPolling() // –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
	listener.join() // –î–∞—Å—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–ª—É—à–∞—Ç–µ–ª—è
	//listener.run() // –ú–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–±–æ—Ç—É –ø–æ—Ç–æ–∫–∞, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

	exitProcess(0)
}

class TextHandlerAdapter<M: Message>(private val textHandler: TgTextPackHandler<M>) : TgEventMessagePackHandlerAdapterBasicTypes() {
	override fun texts(messages: List<Message>) {
		textHandler.texts(messages as List<M>)
	}
}