package iris.tg.examples

import iris.tg.api.items.Message
import iris.tg.command.Command
import iris.tg.longpoll.TgLongPoll
import iris.tg.command.TgCommandPackHandler
import iris.tg.tgApi
import iris.tg.tgApiFuture
import java.util.*
import kotlin.system.exitProcess

/**
 * @created 27.10.2020
 * @author [Ivan Ivanov](https://vk.com/irisism)
 */

fun main() {

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –í —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
	TestUtil.init()
	val props = TestUtil.properties
	val token = props.getProperty("bot.token")

	// –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	val api = tgApiFuture(token)

	// api.deleteWebhook().get() // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ webhook'–∞

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
	val commandsHandler = TgCommandPackHandler<Message> {
		text("–≤—Ä–µ–º—è") {
			api.sendMessage(it.chat.id, "–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${Date()}!")
		}
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ —Å—Ç–∏–ª–µ DSL
	commandsHandler.commands {

		// –ø—Ä–∏–º–µ—Ä –Ω–∞–±–æ—Ä–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
		text("–ø–∏–Ω–≥", "–∫–∏–Ω–≥") {
			api.sendMessage(it.chat.id,
				when(it.text!!) {
					"–ø–∏–Ω–≥" -> "–ü–û–ù–ì!"
					"–∫–∏–Ω–≥" -> "–ö–û–ù–ì!"
					else -> "–ö–∞–∫ —è –∑–¥–µ—Å—å –æ—á—É—Ç–∏–ª—Å—è???"
				}
			)
		}

		// –≤—ã–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		text("–º–æ–π –∏–¥", "/me") {
			val from = it.from!!
			api.sendMessage(it.chat.id, "ID ${from.firstName} ${from.lastName} (@${from.username}) —Ä–∞–≤–µ–Ω: ${from.id}")
		}

		// –∫–æ–º–∞–Ω–¥—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
		regex("""—Ä–∞–Ω–¥–æ–º (\d+) (\d+)""") { message, params ->
			var first = params[1].toInt()
			var second = params[2].toInt()
			if (second < first)
				first = second.also { second = first }

			api.sendMessage(message.chat.id, "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [$first..$second] –≤—ã–ø–∞–ª–æ –Ω–∞ ${(first..second).random()}")
		}

		// –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π (message: Message) -> Unit
		text(listOf("–∫–∞–∫ –¥–µ–ª–∞?", "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"), ::answerHowAreYou)

		// –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å —Ç–∏–ø–∞ Command
		text(listOf("–∫—Ç–æ —Ç—ã?", "–∫—Ç–æ —Ç—ã"), AnswerWhoAreYou())

		regex("""–∫—Ç–æ —è\??""", "(?:–º–æ–π )?–ø—Ä–æ—Ñ–∏–ª—å") { message, params ->
			val from = message.from!!
			api.sendMessage(message.chat.id, "–í—ã ${from.firstName} ${from.lastName} [@${from.username}]. ID = ${from.id}")
		}
	}


	// –ü–µ—Ä–µ–¥–∞—ë–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
	val listener = TgLongPoll(tgApi(token), TextHandlerAdapter(commandsHandler))
	listener.startPolling() // –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
	listener.join() // –î–∞—Å—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–ª—É—à–∞—Ç–µ–ª—è
	//listener.run() // –ú–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–±–æ—Ç—É –ø–æ—Ç–æ–∫–∞, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

	exitProcess(0)
}

fun answerHowAreYou(message: Message) {
	TestUtil.api.sendMessage(message.chat.id, "–ü–æ–∫–∞ –Ω–µ —Ä–æ–¥–∏–ª–∞!")
}

class AnswerWhoAreYou: Command {
	override fun run(message: Message) {
		TestUtil.api.sendMessage(message.chat.id, "–Ø –µ—Å—Ç—å –±–æ—Ç")
	}
}

fun ttt() {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
	val commandsHandler = TgCommandPackHandler<Message> {

		text("–≤—Ä–µ–º—è") {
			TestUtil.api.sendMessage(it.chat.id, "–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${Date()}!")
		}

		// –ø—Ä–∏–º–µ—Ä –Ω–∞–±–æ—Ä–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
		text("–ø–∏–Ω–≥", "–∫–∏–Ω–≥") {
			TestUtil.api.sendMessage(it.chat.id,
				when(it.text!!) {
					"–ø–∏–Ω–≥" -> "–ü–û–ù–ì!"
					"–∫–∏–Ω–≥" -> "–ö–û–ù–ì!"
					else -> "–ö–∞–∫ —è –∑–¥–µ—Å—å –æ—á—É—Ç–∏–ª—Å—è???"
				}
			)
		}

		// –≤—ã–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		text("–º–æ–π –∏–¥", "/me") {
			val from = it.from!!
			TestUtil.api.sendMessage(it.chat.id, "ID ${from.firstName} ${from.lastName} (@${from.username}) —Ä–∞–≤–µ–Ω: ${from.id}")
		}

		// –∫–æ–º–∞–Ω–¥—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
		regex("""—Ä–∞–Ω–¥–æ–º (\d+) (\d+)""") { message, params ->
			var first = params[1].toInt()
			var second = params[2].toInt()
			if (second < first)
				first = second.also { second = first }

			TestUtil.api.sendMessage(message.chat.id, "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [$first..$second] –≤—ã–ø–∞–ª–æ –Ω–∞ ${(first..second).random()}")
		}

		// –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π (message: Message) -> Unit
		text(listOf("–∫–∞–∫ –¥–µ–ª–∞?", "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"), ::answerHowAreYou)

		// –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å —Ç–∏–ø–∞ Command
		text(listOf("–∫—Ç–æ —Ç—ã?", "–∫—Ç–æ —Ç—ã"), AnswerWhoAreYou()::run)

		regex("""–∫—Ç–æ —è\??""", "(?:–º–æ–π )?–ø—Ä–æ—Ñ–∏–ª—å") { message, params ->
			val from = message.from!!
			TestUtil.api.sendMessage(message.chat.id, "–í—ã ${from.firstName} ${from.lastName} [@${from.username}]. ID = ${from.id}")
		}
	}
}